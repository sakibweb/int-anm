class INTanm{constructor(){this.animatedElements=[],this.observer=new IntersectionObserver(this.handleIntersection.bind(this),{threshold:.2}),this.initialize()}initialize(){document.querySelectorAll(".int-anm").forEach((t=>{this.setupElement(t)}))}setupElement(t){let e=this.parseValue(t.textContent);t.dataset.animValue=e,t.dataset.currentValue=e,this.animatedElements.push(t),this.observer.observe(t);new MutationObserver((e=>{for(const a of e)"childList"!==a.type&&"characterData"!==a.type||this.animateNumberChange(t)})).observe(t,{subtree:!0,childList:!0,characterData:!0})}handleIntersection(t,e){t.forEach((t=>{t.isIntersecting&&(this.animateInitialValue(t.target),e.unobserve(t.target))}))}animateInitialValue(t){const e=parseFloat(t.dataset.animValue);isNaN(e)||this.animateValue(t,0,e)}animateNumberChange(t){const e=this.parseValue(t.textContent),a=parseFloat(t.dataset.currentValue);isNaN(e)||isNaN(a)||e===a||(t.dataset.animValue=e,this.animateValue(t,a,e))}animateValue(t,e,a){let n=e;const s=performance.now(),i=Math.abs(a-e);let r=Math.ceil(i/50);r=Math.max(1,r);const l=i=>{const o=Math.min(1,(i-s)/1e3);let u;u=e<a?e+(a-e)*o:e-(e-a)*o,n=this.stepValue(n,u,r,a),t.textContent=this.formatValue(t.textContent,n),t.dataset.currentValue=n,o<1?requestAnimationFrame(l):(t.textContent=this.formatValue(t.textContent,a),t.dataset.currentValue=a)};requestAnimationFrame(l)}stepValue(t,e,a,n){return Math.abs(n-t)<=a?n:t<n?Math.min(n,t+a):Math.max(n,t-a)}parseValue(t){const e=t.match(/[-+]?[\d.,]+/);if(e){let t=e[0].replace(/,/g,"");return parseFloat(t)}return NaN}formatValue(t,e){if(isNaN(e))return t;const a=e.toLocaleString(void 0,{maximumFractionDigits:2});return t.replace(/[-+]?[\d.,]+/,a)}}document.addEventListener("DOMContentLoaded",(()=>{new INTanm}));
